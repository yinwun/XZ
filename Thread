int main(){    unsigned int thID1, thID2, thID3, thID4;    HANDLE hth1, hth2, hth3, hth4;    Arg arg(3.14, "hello world");    ThreadClass tclass("welcom", 999);     //注意的是_beginthreadex是立即返回的，系统不会等线程函数执行完毕，因此要保证    //局部arg变量 在线程函数执行完毕前不会释放，更安全的是使用new来构造arg    hth1 = (HANDLE)_beginthreadex(NULL, 0, threadFun, NULL, 0, &thID1);    hth2 = (HANDLE)_beginthreadex(NULL, 0, threadFun, NULL, 0, &thID2);    hth3 = (HANDLE)_beginthreadex(NULL, 0, threadFunArg, &arg, 0, &thID3);    hth4 = (HANDLE)_beginthreadex(NULL, 0, ThreadClass::threadStaic, &tclass, 0,                                   &thID4);     //主线程一定要等待子线程结束    WaitForSingleObject(hth1, INFINITE);    WaitForSingleObject(hth2, INFINITE);    WaitForSingleObject(hth3, INFINITE);    WaitForSingleObject(hth4, INFINITE);     DWORD exitCode1, exitCode2, exitCode3, exitCode4;    GetExitCodeThread(hth1, &exitCode1);    GetExitCodeThread(hth2, &exitCode2);    GetExitCodeThread(hth3, &exitCode3);    GetExitCodeThread(hth4, &exitCode4);    cout<<endl<<"exitcode::"<<exitCode1<<" "<<exitCode2<<" "<<exitCode3<<" "        <<exitCode4<<endl;    cout<<"ID:"<<thID1<<" "<<thID2<<" "<<thID3<<" "<<thID4<<endl;     //一定要记得关闭线程句柄    CloseHandle(hth1);    CloseHandle(hth2);    CloseHandle(hth3);    CloseHandle(hth4);}
